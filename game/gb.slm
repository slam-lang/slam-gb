const p1 11100100b
const p2 11100100b
const vramts 8000h
const vramtm 9000h
const vramm1 9800h
const vramm15 9A1Fh
const vramm2 9C00h
const tilesize 0900h
const spritesize 0080h
const curflags 00010000b
const negmask 10000000b
const zerotile 68
const cashloc 98D2h
const nextloc 9912h
const nextuloc 99B2h
const timeloc 9A12h
const levelloc 9972h
const wintimeloc 99aeh
const bottom 120

const gamemapstart 0000h
const titlemapstart 0240h
const winmapstart 0480h

const stocksp 3
const topsp 4

gvar gamestate 1

enum
0   GS_TITLE
    GS_GAME
    GS_WIN
end

gvar money 2
gvar timem 2
gvar times 1
gvar timefr 1

gvar tempmoney 2
gvar temptimes 2
gvar temptimem 2
gvar tempnext 2
gvar tempnextu 2
gvar templevel 2

class elements
  const invertflag 8000h
  prop count 2
  prop tpc 2
  prop levels 14

  gvar tick 2

  proc upgrade 2 0
    covr elements.levels .
    covr +
    copy readc 1 +
    putc disc

    covr
    elements.count . read
    covr != 1 !=
    if [
      covr elements.count .
      copy read 1 +
      put disc
    ]

    disc
    disc
    
    ret
  end


  proc upgradetpc 1 0
    copy elements.tpc . read 0 != 1 != if [
      elements.tpc .
      4 put disc

      ret
    ]
    
    copy elements.tpc . read 1 != 1 != if [
      elements.tpc .
      2 elements.invertflag +
      put disc

      ret
    ]
    
    copy elements.tpc . read
    elements.invertflag && elements.invertflag != if [
      elements.tpc .
      copy read 1 -
      put
    
      disc
      ret
    ]

    elements.tpc . 1 +
    copy readc 1 +
    putc

    disc
    ret
  end

  proc subupdate 2 2
    do
      1 -

      copy 1 + (sprite.get)
      stocksp (sprite.settile)
      disc

      copy 0 !=
    end

    ret
  end

  proc curupdate 1 1
    {update currency}
    copy copy elements.tpc . read
    copy elements.invertflag && elements.invertflag !=
    swap
    elements.tick read / swap disc
    0 != 1 != && if [
      money
      copy read 1 +
      put disc

      disc

      ret
    ]
    
    copy elements.tpc . read
    elements.invertflag && elements.invertflag != 1 !=
    if [
      copy elements.tpc . 1 + readc
      money read +
      money swap put disc
    ]
    disc

    ret
  end

  proc update 1 0
    elements.tick
    copy read 1 +
    put disc

    copy elements.tpc . read if (elements.curupdate)
    
    {update elems}
    copy elements.count . read
    copy 1 + (sprite.get)
    topsp (sprite.settile)
    covr 8 * 120 swap - 48 (sprite.setpos)
    disc
    copy 0 != if (elements.subupdate)

    disc
    disc

    ret
  end
  
  proc canbuy 1 1
    money read <

    ret
  end
end

gvar elems elements.SIZE

proc nextcost 1 1
  copy 1 +
  swap 
  elems elements.levels . + readc 1 + 
  *
  1 -
  copy *
  50 *

  ret
end

gvar cursorobj 4

class cursor
  prop y 2
  prop sprite 2
  
  gvar time 2
  gvar pinput 1
  gvar pbtns 1

  proc init 2 1
    1 (sprite.settile)

    covr cursor.sprite .
    swap put disc

    ret
  end

  proc input 1 1
    (joypad.dpad)
    (joypad.get)
    copy 4 && 4 !=
    cursor.pinput readc
    4 && 0 !=
    && if [  
      covr cursor.y .
      copy read 1 +
      put disc
    ]
    copy 8 && 8 !=
    cursor.pinput readc
    8 && 0 !=
    && if [
      covr cursor.y .
      copy read 1 -
      put disc
    ]
    disc

    cursor.pinput
    (joypad.get)
    putc disc
    
    (joypad.buttons)

    (joypad.get)
    copy 1 && 1 !=
    cursor.pbtns readc
    1 && 0 !=
    cursorobj cursor.y . read (nextcost) (elements.canbuy) &&
    && if [
      money
      copy read cursorobj cursor.y . read (nextcost) -
      put disc

      elems cursorobj cursor.y . read (elements.upgrade)

      elems (elements.upgradetpc)
    ]
    disc
    
    cursor.pbtns
    (joypad.get)
    putc disc

    ret
  end

  proc update 1 0
    (cursor.input)

    copy cursor.y . 1 + readc negmask && 0 != if [
      copy cursor.y . 0 put disc
    ]

    elems elements.count . read covr cursor.y . read - 255 swap < if [
      copy cursor.y . elems elements.count . read put disc
    ]
    
    copy cursor.sprite . read
    covr cursor.y . read 8 *
    bottom swap -
    36
    cursor.time
    copy read 1 +
    put read 32 && if [
      1 +
    ]
    (sprite.setpos)
    disc
    disc

    ret
  end
end

proc copymap 1 0
  0
  do
    covr covr +
    tilem + readc
    covr vramm1 +
    swap
    lcd
    putc disc
    
    1 +

    copy vramm2 vramm1 - <
  end
  disc
  disc

  ret
end

proc updatetitle 0 0
  (joypad.buttons)
  (joypad.get)
  15 &&
  15 != if [
    gamemapstart (copymap)
    
    gamestate
    GS_GAME
    putc disc
  ]
  
  ret
end

proc wintime 0 0
  temptimes times readc put disc
  temptimem timem read put disc
  0
  do
    wintimeloc covr -
    temptimes read 10 swap / swap
    temptimes swap put disc
    zerotile +
    lcd putc disc
    
    wintimeloc covr 3 + -
    temptimem read 10 swap / swap
    temptimem swap put disc
    zerotile +
    lcd putc disc
    
    1 +
    
    copy 2 <
  end
  disc
  
  ret
end

proc updategame 0 0
  cursorobj (cursor.update)
  elems (elements.update)
  
  elems elements.count . read 13 swap < if [
    lcd.LCDCF_ON
    lcd.LCDCF_BGON +
    (lcd.mode)
    
    winmapstart (copymap)

    (lcd.vblank)

    gamestate
    GS_WIN
    putc disc

    (wintime)
  
    ret
  ]

  timefr
  copy readc 1 +
  putc readc
  60 swap < if [
    times
    copy readc 1 +
    putc disc
    timefr
    0 putc disc
  ]
  times readc
  60 swap < if [
    timem
    copy read 1 +
    put disc
    times
    0 putc disc
  ]

  tempmoney money read put disc
  tempnext elems elements.count . read (nextcost) put disc
  tempnextu cursorobj cursor.y . read (nextcost) put disc
  temptimes times readc put disc
  temptimem timem read put disc
  templevel
  elems elements.levels .
  cursorobj cursor.y . read +
  readc put disc
  0
  do
    cashloc covr -
    tempmoney read 10 swap / swap
    tempmoney swap put disc
    zerotile +
    lcd putc disc
    
    nextloc covr -
    tempnext read 10 swap / swap
    tempnext swap put disc
    zerotile +
    lcd putc disc
    
    nextuloc covr -
    tempnextu read 10 swap / swap
    tempnextu swap put disc
    zerotile +
    lcd putc disc
   
    copy 1 < if [
      timeloc covr -
      temptimes read 10 swap / swap
      temptimes swap put disc
      zerotile +
      lcd putc disc
      
      timeloc covr 3 + -
      temptimem read 10 swap / swap
      temptimem swap put disc
      zerotile +
      lcd putc disc

      levelloc covr -
      templevel read 10 swap / swap
      templevel swap put disc
      zerotile +
      lcd putc disc
    ]
    
    1 +
    
    copy 4 <
  end
  disc

  ret
end


proc updatemusic 0 0

  ret
end

proc main 0 0
  cursorobj
  0 (sprite.get)
  (cursor.init)
  disc
  
  (lcd.init)

  (lcd.vblank)

  lcd.LCDCF_OFF
  (lcd.mode)
  
  0
  do
    copy vramtm + spritesize -
    covr spritesize 1 - < if [
      disc copy vramts +
    ]
    covr tiles + readc
    putc disc

    1 +

    copy tilesize <
  end
  disc

  titlemapstart (copymap)
  
  lcd.LCDCF_ON
  lcd.LCDCF_BGON +
  lcd.LCDCF_OBJON +
  (lcd.mode)

  lcd.rBGP
  p1
  putc disc
  
  lcd.rOBP0
  p2
  putc disc

  elems elements.count . 0 put disc
  elems elements.tpc . 0 put disc

  255 (snd.init)
  
  1 00  (snd.sweep)
  1 3   (snd.length)
  1 242 (snd.envelope)
  1 446 (snd.freq)

  do
    (lcd.vblank)
  
    gamestate readc GS_TITLE != 1 != if (updatetitle)
    gamestate readc GS_GAME  != 1 != if (updategame)
    gamestate readc GS_WIN  != 1 != if (wintime)

    (updatemusic)

    1
  end

  ret
end
